{
  "version": 3,
  "sources": ["../src/utils/formatehtml.js", "../src/utils/html.js", "../src/main.js"],
  "sourcesContent": ["export class FormatHTML {\n    constructor() {\n        \n    }\n\n    formatHTML(html) {\n        // Protect {{ ... }} expressions by replacing them with placeholders\n        const placeholders = [];\n        html = html.replace(/\\{\\{[\\s\\S]*?\\}\\}/g, (match) => {\n          placeholders.push(match);\n          return `__HUBL_EXPR_${placeholders.length - 1}__`;\n        });\n\n        const tab = '  '; // 2 spaces for indentation\n        let result = [];\n        let indentLevel = 0;\n        const stack = [];\n        let inHublJson = false;\n        let jsonIndent = 0;\n        \n        // First, normalize and split the HTML into lines\n        let normalizedHtml = html\n            .replace(/\\r\\n|\\r/g, '\\n')  // Normalize line endings\n            // Don't add line breaks inside HTML tags with HubL expressions\n            .replace(/<[^>]*\\{\\{[^}]+\\}\\}[^>]*>/g, match => match.replace(/\\n/g, ' '))\n            .replace(/([>}])([^<{])/g, '$1\\n$2')  // Add line breaks after > and }\n            .replace(/([^{])(<|\\{%(?!.*\\{\\{))([^\\n]*\\{\\{[^}]+\\}\\}[^\\n]*\\%\\})?/g, '$1\\n$2$3')  // Add line breaks before <, {% but not inside HubL expressions\n            .replace(/(%\\})([^\\s}])/g, '$1\\n$2')  // Add line breaks after %}\n            // Add line breaks after }} but not if it's already complete or inside another brace\n            .replace(/(\\}\\})(?!\\})/g, '$1\\n')\n            .replace(/\\n+/g, '\\n')  // Remove multiple newlines\n            .replace(/\\{\\s*\\n\\s*\\}/g, '{}')  // Fix empty objects\n            .replace(/\\[\\s*\\n\\s*\\]/g, '[]')  // Fix empty arrays\n            .trim();\n\n        // Restore {{ ... }} expressions\n        normalizedHtml = normalizedHtml.replace(/__HUBL_EXPR_(\\d+)__/g, (_, i) => placeholders[i]);\n\n        // Collapse newlines inside attribute values (especially around {{ ... }})\n        normalizedHtml = normalizedHtml.replace(/=\"\\s*\\n\\s*({{[\\s\\S]*?}})\\s*\\n\\s*\"/g, '=\"$1\"');\n            \n        // Collapse extra spaces inside tag attributes\n        normalizedHtml = normalizedHtml.replace(/<([^>]+)>/g, (match, content) => {\n          return `<${content.replace(/\\s{2,}/g, ' ').trim()}>`;\n        });\n\n        // Keep HubL {% ... %} blocks in one line but don\u2019t touch {{ ... }}\n        normalizedHtml = normalizedHtml.replace(/\\{%\\s*([\\s\\S]*?)\\s*%\\}/g, (match) => {\n          // Collapse excessive whitespace but keep braces intact\n          return match\n            .replace(/\\s{2,}/g, ' ')\n            .replace(/\\s*%\\}/, ' %}')\n            .replace(/\\{%\\s*/, '{% ');\n        });\n\n        // Keep HubL {{ ... }} expressions in one line\n        normalizedHtml = normalizedHtml.replace(/\\{\\{\\s*([\\s\\S]*?)\\s*\\}\\}/g, (match) => {\n          return match\n            .replace(/\\s{2,}/g, ' ')\n            .replace(/\\s*\\}\\}/, ' }}')\n            .replace(/\\{\\{\\s*/, '{{ ');\n        });\n            \n        // Process each line individually\n        const lines = normalizedHtml.split('\\n')\n            .map(line => line.trim())\n            .filter(line => line.length > 0);\n            \n        const selfClosingTags = new Set(['br', 'img', 'input', 'link', 'meta', 'hr']);\n        const inlineElements = new Set(['span','a','strong','em','b','i','u','code','mark','small']);\n        \n        for (let i = 0; i < lines.length; i++) {\n            const line = lines[i];\n            \n            if (!line) continue;\n            \n            // Handle HubL tags\n            if (line.startsWith('{%') || line.startsWith('{{')) {\n                const isClosingTag = /\\bend(?:if|for|macro|block|autoescape|filter|trans|with|set|macro|call|raw|spaceless|compress)\\b|\\belse\\b|^\\s*\\{%-?\\s*end/.test(line);\n                const isOpeningTag = /\\b(?:if|for|macro|block|autoescape|filter|trans|with|set|macro|call|raw|spaceless|compress)\\b/.test(line) && !isClosingTag;\n                const isSetTag = line.includes('{% set');\n                \n                // Handle inline expressions\n                if (line.startsWith('{{')) {\n                    // Handle closing braces in the same line\n                    let expr = line;\n                    if (line.endsWith('}}') && line.includes('{{')) {\n                        expr = line;\n                    } else if (i + 1 < lines.length && lines[i + 1].trim() === '}') {\n                        expr = line + lines[i + 1];\n                        i++; // Skip the next line since we've processed it\n                    }\n                    result.push(tab.repeat(indentLevel) + expr);\n                    continue;\n                }\n                \n                if (isClosingTag) {\n                    if (inHublJson) {\n                        inHublJson = false;\n                        jsonIndent = 0;\n                    }\n                    indentLevel = Math.max(0, indentLevel - 1);\n                }\n                \n                result.push(tab.repeat(indentLevel) + line);\n                \n                if (isSetTag && line.includes('[')) {\n                    inHublJson = true;\n                    jsonIndent = indentLevel + 1;\n                }\n                \n                if (isOpeningTag) {\n                    indentLevel++;\n                }\n                continue;\n            }\n            \n            // Handle JSON-like structures in HubL\n            if (inHublJson) {\n                // Handle JSON object/array indentation\n                const jsonLine = line.replace(/^[,\\s]*/, '');\n                const isClosingBrace = jsonLine.startsWith('}') || jsonLine.startsWith(']');\n                \n                if (isClosingBrace) {\n                    jsonIndent = Math.max(0, jsonIndent - 1);\n                }\n                \n                result.push(tab.repeat(jsonIndent) + jsonLine);\n                \n                if (jsonLine.endsWith('{') || jsonLine.endsWith('[')) {\n                    jsonIndent++;\n                }\n                \n                continue;\n            }\n            \n            // Handle HTML closing tags\n            if (line.startsWith('</')) {\n                const tagName = line.match(/^<\\/\\s*([\\w-]+)/)?.[1]?.toLowerCase();\n                // Find the last matching opening tag in the stack\n                let lastIndex = -1;\n                for (let j = stack.length - 1; j >= 0; j--) {\n                    if (stack[j].tagName === tagName) {\n                        lastIndex = j;\n                        break;\n                    }\n                }\n\n                if (lastIndex !== -1) {\n                    const last = stack.splice(lastIndex)[0];\n                    if (last && last.increased) {\n                        indentLevel = Math.max(0, indentLevel - 1);\n                    }\n                }\n\n                result.push(tab.repeat(indentLevel) + line);\n                continue;\n            }\n            \n            // Handle HTML opening tags\n            if (line.startsWith('<')) {\n                let formattedLine = line;\n                const tagName = line.match(/^<\\s*([\\w-]+)/)?.[1]?.toLowerCase();\n                const isSelfClosing = line.endsWith('/>') || selfClosingTags.has(tagName);\n                \n                // Preserve inline HubL expressions in attributes\n                if (line.includes('{{') && line.includes('}}')) {\n                    formattedLine = line.replace(/\\{\\{[^}]+\\}\\}/g, match => {\n                        // Keep the expression on the same line\n                        return match.replace(/\\s+/g, ' ');\n                    });\n                }\n\n                // Add the line with proper indentation\n                result.push(tab.repeat(indentLevel) + formattedLine);\n\n                if (!isSelfClosing && !inlineElements.has(tagName)) {\n                    stack.push({ tagName, increased: true });\n                    indentLevel++;\n                }\n                continue;\n            }\n            \n            // Handle regular text content\n            result.push(tab.repeat(indentLevel) + line);\n        }\n        \n        return result.join('\\n');\n    }\n}", "export class HTMLStatic {\n    static html() {\n        return `\n        <div class=\"\">\n    <div class=\"p-4 flex gap-4\">\n        <div class=\"w-[300px]\">\n            <div id=\"optionsContainer\">\n                <div class=\"text-lg font-medium text-gray-900 dark:text-gray-100 pb-2\">Formatting Options:</div>\n                <div id=\"hublOptions\" class=\"space-y-2\">\n                    <label class=\"flex items-center space-x-2 text-sm\">\n                        <input type=\"checkbox\" id=\"useHublDashes\" class=\"rounded border-gray-300 text-blue-600\" />\n                        <span>Use HubL whitespace control ({%- -%})</span>\n                    </label>\n                </div>\n                <div id=\"htmlOptions\" class=\"space-y-2 mt-2\">\n                    <label class=\"flex items-center space-x-2 text-sm\">\n                        <input type=\"checkbox\" id=\"removeDataAttributes\" class=\"rounded border-gray-300 text-blue-600\" />\n                        <span>Remove data-* attributes</span>\n                    </label>\n                    <label class=\"flex items-center space-x-2 text-sm\">\n                        <input type=\"checkbox\" id=\"removeClasses\" class=\"rounded border-gray-300 text-blue-600\" />\n                        <span>Remove class attributes</span>\n                    </label>\n                    <label class=\"flex items-center space-x-2 text-sm\">\n                        <input type=\"checkbox\" id=\"removeStyleAttrs\" class=\"rounded border-gray-300 text-blue-600\" />\n                        <span>Remove style attributes</span>\n                    </label>\n                </div>\n            </div>\n        </div>\n        <div class=\"w-[calc(100%-300px)]\">\n            <div class=\"grid grid-cols-1 lg:grid-cols-2\">\n                <!-- Input Section -->\n                <div class=\"space-y-4\">\n                    <div class=\"flex items-center gap-4\">\n                        <label for=\"inputCode\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-100\">Input Code</label>\n                        <span id=\"charCount\" class=\"text-xs text-gray-500\">0 characters</span>\n                    </div>\n                    <textarea id=\"inputCode\" class=\"\" placeholder=\"Paste your HubL/HTML code here...\" spellcheck=\"false\"></textarea>\n                </div>\n\n                <!-- Output Section -->\n                <div class=\"space-y-4\">\n                    <div class=\"flex items-center gap-5\">\n                        <div>\n                            <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-100\">Formatted Output</label>\n                        </div>\n                        <span id=\"outputCharCount\" class=\"text-xs text-gray-500\">0 characters</span>\n                    </div>\n                    <div class=\"relative\">\n                        <div class=\"absolute top-0 right-0\">\n                            <button id=\"copyBtn\" class=\"px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 flex items-center space-x-2\">\n                                <span>Copy to Clipboard</span>\n                                <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                    <path\n                                        stroke-linecap=\"round\"\n                                        stroke-linejoin=\"round\"\n                                        stroke-width=\"2\"\n                                        d=\"M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3\"\n                                    />\n                                </svg>\n                            </button>\n                        </div>\n                        <pre id=\"outputCode\"></pre>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n        `\n    }\n}\n    \n", "// Main class definition\n\nimport { FormatHTML } from \"./utils/formatehtml\";\nimport { HTMLStatic } from \"./utils/html\";\n\n\nclass HubLFormatter {\n  constructor() {\n    this.app = document.getElementById('app');\n    if (!this.app) {\n      console.error('Could not find app element');\n      return;\n    }\n\n    this.formatHTMLWrapper = new FormatHTML();\n    this.formatHTML = this.formatHTMLWrapper.formatHTML;\n\n    this.options = {\n      useHublDashes: false,\n      removeDataAttributes: false,\n      removeClasses: false,\n      removeStyleAttrs: false\n    };\n    this.hasHublCode = false;\n    this.hasDataAttributes = false;\n    this.elements = {}; // Initialize elements object\n\n    this.initUI();\n\n    // Small delay to ensure DOM is ready\n    setTimeout(() => {\n      this.setupEventListeners();\n    }, 10);\n  }\n\n  initUI() {\n    if (!this.app) return;\n\n    this.app.innerHTML = HTMLStatic.html();\n\n    // Cache DOM elements\n    this.elements = {\n      input: document.getElementById('inputCode'),\n      output: document.getElementById('outputCode'),\n      formatBtn: document.getElementById('formatBtn'),\n      copyBtn: document.getElementById('copyBtn'),\n      charCount: document.getElementById('charCount'),\n      outputCharCount: document.getElementById('outputCharCount'),\n      optionsContainer: document.getElementById('optionsContainer'),\n      hublOptions: document.getElementById('hublOptions'),\n      htmlOptions: document.getElementById('htmlOptions'),\n      useHublDashes: document.getElementById('useHublDashes'),\n      removeDataAttrs: document.getElementById('removeDataAttributes'),\n      removeClasses: document.getElementById('removeClasses'),\n      removeStyleAttrs: document.getElementById('removeStyleAttrs')\n    };\n  }\n\n  setupEventListeners() {\n    if (!this.elements) return;\n\n    const { input, output, copyBtn, useHublDashes, removeDataAttrs, removeClasses } = this.elements;\n\n    if (!input || !output || !copyBtn) {\n      console.error('Required elements not found');\n      return;\n    }\n\n    // Handle paste and input events\n    const formatInput = () => {\n      this.analyzeCode();\n      this.formatCode();\n    };\n\n    input.addEventListener('paste', (e) => {\n      // Let the paste complete first\n      setTimeout(formatInput, 0);\n    });\n\n    input.addEventListener('input', formatInput);\n\n    copyBtn.addEventListener('click', () => this.copyToClipboard());\n\n    // Update options\n    if (useHublDashes) {\n      useHublDashes.addEventListener('change', (e) => {\n        this.options.useHublDashes = e.target.checked;\n        this.formatCode();\n      });\n    }\n\n    if (removeDataAttrs) {\n      removeDataAttrs.addEventListener('change', (e) => {\n        this.options.removeDataAttributes = e.target.checked;\n        this.formatCode();\n      });\n    }\n\n    if (removeClasses) {\n      removeClasses.addEventListener('change', (e) => {\n        this.options.removeClasses = e.target.checked;\n        this.formatCode();\n      });\n    }\n\n    if (this.elements.removeStyleAttrs) {\n      this.elements.removeStyleAttrs.addEventListener('change', (e) => {\n        this.options.removeStyleAttrs = e.target.checked;\n        this.formatCode();\n      });\n    }\n  }\n\n  analyzeCode() {\n    const code = this.elements.input.value;\n    this.updateCharCount(code.length);\n\n    // Always show all options\n    this.toggleOptions('hublOptions', true);\n    this.toggleOptions('htmlOptions', true);\n    this.elements.optionsContainer.classList.remove('hidden');\n\n    // Keep checkbox unchecked by default\n    if (this.elements.useHublDashes) {\n      this.elements.useHublDashes.checked = false;\n    }\n\n    // Store analysis results\n    this.hasHublCode = /\\{\\s*[%#]/.test(code) || /\\{%-?/.test(code);\n    this.hasDataAttributes = /\\sdata-\\w+\\s*=/.test(code);\n  }\n\n  toggleOptions(elementId, show) {\n    const element = this.elements[elementId];\n    if (element) {\n      element.classList.toggle('hidden', !show);\n    }\n  }\n\n  formatCode() {\n    if (!this.elements) return;\n\n    const input = this.elements.input.value;\n    if (!input.trim()) {\n      this.elements.output.textContent = '';\n      this.updateCharCount(0, true);\n      return;\n    }\n\n    let formatted = input;\n\n    // Always apply basic HTML/HubL formatting first\n    formatted = this.formatHTML(formatted);\n\n    // Apply additional formatting based on options\n    if (this.options.useHublDashes) {\n      // Only add dashes to HubL tags that don't already have them\n      formatted = this.addHublDashes(formatted);\n    } else {\n      // Remove dashes if checkbox is unchecked\n      formatted = formatted\n        .replace(/\\{\\s*%-/g, '{%')\n        .replace(/-%\\s*\\}/g, '%}');\n    }\n\n    if (this.options.removeDataAttributes) {\n      formatted = this.removeDataAttributes(formatted);\n    }\n\n    if (this.options.removeClasses) {\n      formatted = this.removeClassAttributes(formatted);\n    }\n\n    if (this.options.removeStyleAttrs) {\n      formatted = this.removeStyleAttributes(formatted);\n    }\n\n    this.elements.output.textContent = formatted;\n    this.updateCharCount(formatted.length, true);\n  }\n\n  addHublDashes(code) {\n    if (!code) return code;\n\n    // First normalize all tags to remove any existing dashes\n    code = code\n      .replace(/\\{\\s*%-/g, '{%')  // Remove dash after {\n      .replace(/-%\\s*\\}/g, '%}'); // Remove dash before }\n\n    // Then add single dashes where needed\n    code = code\n      .replace(/(\\{\\s*%)(?!--)/g, '{%-')  // Add single dash after {\n      .replace(/(?<!-)(%\\s*\\})/g, '-%}'); // Add single dash before }\n\n    return code;\n  }\n\n  removeDataAttributes(code) {\n    // Remove all data-* attributes with different quote styles and spacing\n    return code.replace(/\\s+data-[\\w-]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|\\S+))?/gi, '');\n  }\n\n  removeClassAttributes(code) {\n    // Remove all class attributes from any HTML element\n    return code.replace(/\\s+class\\s*=\\s*[\"'][^\"']*[\"']/gi, '')\n      .replace(/\\s+class\\s*=[^\\s>]+/gi, '');\n  }\n\n  removeStyleAttributes(code) {\n    // Remove all style attributes from any HTML element\n    return code.replace(/\\s+style\\s*=\\s*[\"'][^\"']*[\"']/gi, '')\n      .replace(/\\s+style\\s*=[^\\s>]+/gi, '');\n  }\n\n\n\n\n  updateCharCount(count, isOutput = false) {\n    const label = isOutput ? 'Output: ' : 'Input: ';\n    const element = isOutput ? this.elements.outputCharCount : this.elements.charCount;\n    if (element) {\n      element.textContent = `${label}${count} character${count !== 1 ? 's' : ''}`;\n    }\n  }\n\n  async copyToClipboard() {\n    try {\n      const output = this.elements.output.textContent;\n      if (!output.trim()) {\n        this.showError('No content to copy');\n        return;\n      }\n\n      await navigator.clipboard.writeText(output);\n      this.showSuccess('Copied to clipboard!');\n    } catch (error) {\n      console.error('Error copying to clipboard:', error);\n      this.showError('Failed to copy to clipboard');\n    }\n  }\n\n  showError(message) {\n    this.showNotification(message, 'bg-red-100 border-red-400 text-red-700');\n  }\n\n  showSuccess(message) {\n    this.showNotification(message, 'bg-green-100 border-green-500 text-green-700');\n  }\n\n  showNotification(message, className) {\n    const notification = document.createElement('div');\n    notification.className = `fixed bottom-4 right-4 px-4 py-2 border rounded shadow-lg ${className}`;\n    notification.textContent = message;\n    document.body.appendChild(notification);\n\n    setTimeout(() => {\n      notification.remove();\n    }, 3000);\n  }\n}\n\n// Initialize the app when DOM is ready\nfunction initApp() {\n  try {\n    window.app = new HubLFormatter();\n    if (!window.app.app) {\n      console.error('Failed to initialize app');\n    }\n  } catch (error) {\n    console.error('Error initializing app:', error);\n  }\n}\n\n// Start the app when the DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initApp);\n} else {\n  // If DOM is already loaded, wait a small delay to ensure everything is ready\n  setTimeout(initApp, 10);\n}\n\n// Export the class for ES modules\nexport default HubLFormatter;\n"],
  "mappings": "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",
  "names": []
}
